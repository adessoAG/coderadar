import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${version_spring_boot}")
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.ajoberstar:gradle-git:1.5.1"
    }
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "org.asciidoctor.convert"
apply plugin: "org.ajoberstar.github-pages"

group = "org.wickedsource"
version = "1.0.0-SNAPSHOT"

ext {
    snippetsDir = file("build/generated-snippets")
}

processResources {
    filter ReplaceTokens, tokens: [
            "coderadar.version": version
    ]
}

test {
    outputs.dir snippetsDir

    useJUnit {
        // disable long-running integration tests by default
        excludeCategories "org.wickedsource.coderadar.testframework.category.IntegrationTest"
    }
}

task integrationTest(type: Test) {
    useJUnit {
        includeCategories "org.wickedsource.coderadar.testframework.category.IntegrationTest"
    }
}

task controllerTest(type: Test) {
    useJUnit {
        includeCategories "org.wickedsource.coderadar.testframework.category.ControllerTest"
    }
}

asciidoctor {
    attributes "snippets": snippetsDir,
            "version": version,
            "date": new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
            "stylesheet": "themes/riak.css"
    inputs.dir snippetsDir
    dependsOn test
    sourceDir "src/main/asciidoc"
    outputDir "build/docs"
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into "static/docs"
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-web:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-hateoas:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-security:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${version_spring_boot}"
    compile "org.springframework.boot:spring-boot-devtools:${version_spring_boot}"
    compile "org.eclipse.jgit:org.eclipse.jgit:4.1.0.201509280440-r"
    compile "commons-io:commons-io:2.4"
    compile "io.fabric8:gitective-core:0.9.10"
    compile "com.h2database:h2:1.4.191"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.hibernate:hibernate-core:${version_hibernate}"
    compile "org.hibernate:hibernate-validator:${version_hibernate}"
    compile "org.reflections:reflections:0.9.10"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1"
    compile "com.auth0:java-jwt:3.1.0"
    compile "joda-time:joda-time:2.9.7"
    compile "org.passay:passay:1.2.0"


    compile project(":plugins:loc-analyzer-plugin")
    compile project(":plugins:checkstyle-analyzer-plugin")

    runtime "mysql:mysql-connector-java:5.1.6"
    runtime "com.googlecode.log4jdbc:log4jdbc:1.2"

    testCompile "org.springframework.boot:spring-boot-starter-test:${version_spring_boot}"
    testCompile "junit:junit:4.12"
    testCompile "org.slf4j:slf4j-ext:1.7.21"
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:${version_spring_restdocs}"
    testCompile "org.springframework.restdocs:spring-restdocs-core:${version_spring_restdocs}"
    testCompile "com.github.springtestdbunit:spring-test-dbunit:1.3.0"
    testCompile "org.dbunit:dbunit:2.5.2"
    testCompile "com.jayway.jsonpath:json-path:2.2.0"
    testCompile "org.assertj:assertj-core:3.5.1"

}

springBoot {
    executable = true
}

bootRun {
    jvmArgs =
            [
                    // debugging
                    "-Xdebug",
                    "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005",

                    // logging
                    "-Dlogging.level.org.wickedsource.coderadar=DEBUG",
                    "-Dlogging.level.org.wickedsource.coderadar.job.JobLogger=INFO",
                    "-Dlogging.level.org.hibernate.SQL=ERROR",
                    "-Dlogging.level.org.hibernate.type=ERROR",
                    "-Dlogging.level.org.reflections=ERROR",

                    // log4jdbc for logging SQL queries
                    "-Dlogging.level.jdbc.sqlonly=INFO",
                    "-Dlogging.level.jdbc.sqltiming=ERROR",
                    "-Dlogging.level.jdbc.audit=ERROR",
                    "-Dlogging.level.jdbc.connection=ERROR",
                    "-Dlogging.level.jdbc.resultset=ERROR",

                    "-Dlogging.file=coderadar.log",

                    // coderadar settings for server instance
                    "-Dcoderadar.master=true",
                    "-Dcoderadar.slave=true",
                    "-Dcoderadar.scanIntervalInSeconds=30",
                    "-Dcoderadar.workdir=coderadar-workdir",
                    "-Dcoderadar.dateLocale=de_DE",

                    // hibernate
                    "-Dspring.jpa.hibernate.ddl-auto=create",

                    // file based H2 datasource
//                    "-Dspring.datasource.url=jdbc:h2:file:C:/coderadar/database",
//                    "-Dspring.datasource.username=sa",
//                    "-Dspring.datasource.password=sa",
//                    "-Dspring.datasource.driverClassName=org.h2.Driver",

                    // MySQL datasource
                    "-Dspring.datasource.url=jdbc:mysql://localhost/coderadar",
                    "-Dspring.datasource.username=coderadar",
                    "-Dspring.datasource.password=coderadar",
                    "-Dspring.datasource.driver-class-name=com.mysql.jdbc.Driver",
                    "-Dspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect",

                    // MySQL datasource with log4jdbc driver spy to log SQL output
//                    "-Dspring.datasource.url=jdbc:log4jdbc:mysql://localhost/coderadar",
//                    "-Dspring.datasource.username=coderadar",
//                    "-Dspring.datasource.password=coderadar",
//                    "-Dspring.datasource.driver-class-name=net.sf.log4jdbc.DriverSpy",
//                    "-Dspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect",

                    // authentication
                    // Duration in minutes
                    "-Dcoderadar.access.token.duration=15",
                    // 60 days
                    "-Dcoderadar.refresh.token.duration=86400"
            ]
}

githubPages {
    repoUri = "git@github.com:reflectoring/coderadar.git"
    targetBranch = "gh-pages"
    pages {
        from "build/docs/html5"
        into "${version}/docs"
    }
}
